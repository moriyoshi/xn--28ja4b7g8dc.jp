#!/usr/bin/python

import os
import sys
import re
import pwd
import grp
import optparse
from iniparse import ini
from iniparse.config import Undefined
import time
import daemon

import twisted.names.dns
import twisted.names.server
import twisted.names.authority
import twisted.names.common
import twisted.names as names
# try:
#     from twisted.internet import epollreactor
#     epollreactor.install()
# except:
#     pass
from twisted.internet import defer, reactor
from twisted.python import failure
from twisted.enterprise import adbapi

PROGNAME = os.path.basename(sys.argv[0])

PREFIX = os.path.dirname(os.path.realpath(os.path.dirname(sys.argv[0])))

ETC_DIR = os.path.join(PREFIX, 'etc')
PKG_ETC_DIR = os.path.join(ETC_DIR, PROGNAME)
VAR_DIR = os.path.join(PREFIX, 'var', 'lib')
PKG_VAR_DIR = os.path.join(VAR_DIR, PROGNAME)

DEFAULTS = {
    'zone_repo_dir': os.path.join(PKG_VAR_DIR, 'zones'),
    'config_file': os.path.join(PKG_ETC_DIR, 'config.ini'),
    'serial_file': os.path.join(PKG_VAR_DIR, 'serial'),
    'foreground': False,
    'soa': dict(admin='', refresh=120, retry=60, expire=86400, minimum=43200, ttl=60)
    }

def resolve_uid(uid):
    try:
        _uid = int(uid)
        return pwd.getpwuid(_uid)[2:4]
    except ValueError:
        return pwd.getpwnam(uid)[2:4]

def resolve_gid(gid):
    try:
        _gid = int(gid)
        return _gid
    except ValueError:
        return grp.getgrnam(gid)[2]

def resolve_uid(uid):
    try:
        _uid = int(uid)
        return (_uid, None)
    except ValueError:
        return pwd.getpwnam(uid)[2:4]

class Backend(object):
    def __init__(self, origin):
        self.origin = origin

    def get(self, domain):
        return defer.succeed(None)


class DBBackend(Backend):
    def __init__(self, origin, pool):
        Backend.__init__(self, origin)
        self.pool = pool

    def get(self, domain):
        deferred = defer.Deferred()
        f = self.pool.runQuery('SELECT `type`, value FROM records WHERE domain=%s AND origin=%s', (domain, self.origin))
        def receive_results(rows):
            rows = list(rows)
            if len(rows) == 0:
                rows = None
            deferred.callback(rows)
        f.addCallbacks(receive_results)
        return deferred


def domain_belongs_to(a, b):
    return a == b or (not a.startswith('.') and a.endswith('.' + b))

class AnyAuthority(names.common.ResolverBase):
    def __init__(self, origin, v4addresses, v6addresses, nameservers, serial, hook=None, admin='', refresh=120, retry=60, expire=86400, minimum=43200, ttl=60):
        names.common.ResolverBase.__init__(self)
        self.origin = origin
        self.v4addresses = v4addresses
        self.v6addresses = v6addresses
        self.nameservers = nameservers
        self.serial = serial
        self.hook = hook
        self.admin = admin
        self.refresh = refresh
        self.retry = retry
        self.expire = expire
        self.minimum = minimum
        self.ttl = ttl
        self.cache = {}

    def get_records(self, domain):
        if not domain_belongs_to(domain, self.origin):
            retval = []
        else:
            retval = self.cache.get(domain, None)

        deferred = defer.Deferred()
        if retval is None:
            def next(records):
                self.cache[domain] = records
                deferred.callback(records)
            self.create_records(domain).addCallback(next)
        else:
            deferred.callback(retval)
        return deferred

    def create_records(self, domain):
        deferred = defer.Deferred()
        if not domain_belongs_to(domain, self.origin):
            deferred.success([])
        else:
            def next(records):
                record_types = {}
                if records is not None:
                    for record in records:
                        record_types.setdefault(record['type'], []).append(record)

                retval = self.create_SOA(domain) + self.create_NS(domain)
                if 'AAAA' not in record_types and 'A' not in record_types and 'CNAME' not in record_types:
                    retval += self.create_A_and_AAAA()

                for type, _records in record_types.iteritems():
                    klass = getattr(names.dns, 'Record_%s' % type.upper(), None)
                    if klass is None:
                        continue
                    for record in _records:
                        retval.append(klass(record['value'], ttl=self.ttl))
                deferred.callback(retval)

            if self.hook is not None and domain not in self.nameservers and domain != self.origin:
                self.hook.get(domain[0:-len(self.origin) - 1]).addCallback(next)
            else:
                next([])
        return deferred

    def create_SOA(self, domain):
        return [names.dns.Record_SOA(
            domain, self.admin,
            serial=self.serial,
            refresh=self.refresh,
            retry=self.retry,
            expire=self.expire,
            minimum=self.minimum,
            ttl=self.ttl)]

    def create_NS(self, domain):
        return [names.dns.Record_NS(nameserver, self.ttl) for nameserver in self.nameservers]

    def create_A_and_AAAA(self):
        retval = []
        if self.v4addresses is not None:
            for v4address in self.v4addresses:
                retval.append(names.dns.Record_A(v4address, self.ttl))
        if self.v6addresses is not None:
            for v6address in self.v6addresses:
                retval.append(names.dns.Record_AAAA(self.v6address, self.ttl))
        return retval

    def _lookup(self, name, cls, type, timeout):
        deferred = defer.Deferred()
        def next(records):
            authority = []
            results = []
            cnames = []
            additional = []

            for record in records:
                if record.ttl is not None:
                    ttl = record.ttl
                else:
                    ttl = default_ttl

                if record.TYPE == type or type == names.dns.ALL_RECORDS:
                    results.append(
                        names.dns.RRHeader(name, record.TYPE, names.dns.IN, ttl, record, auth=True)
                    )
                if record.TYPE == names.dns.CNAME:
                    cnames.append(
                        names.dns.RRHeader(name, record.TYPE, names.dns.IN, ttl, record, auth=True)
                    )
            if not results:
                results = cnames


            _records = results + authority
            def _next():
                while _records:
                    record = _records.pop(0)
                    section = {names.dns.NS: additional, names.dns.CNAME: results, names.dns.MX: additional}.get(record.type)
                    if section is not None:
                        _domain = str(record.payload.name).lower()
                        self.get_records(_domain).addCallback(next, _domain)
                        return
                    
                if len(results) == 0 and len(authority) == 0 and len(additional) == 0:
                    deferred.errback(failure.Failure(names.dns.DomainError(name)))
                else:
                    deferred.callback((results, authority, additional))

            def next(records, _domain):
                if records is not None:
                    for rec in records:
                        if rec.TYPE == names.dns.A:
                            section.append(
                                names.dns.RRHeader(_domain, names.dns.A, names.dns.IN, rec.ttl or default_ttl, rec, auth=True)
                            )
                _next()

            _next()

        self.get_records(name).addCallback(next)
        return deferred

def create_resolvers_from_zone_files(zone_files):
    retval = []
    for zone_file in zone_files:
        retval.append(names.authority.BindAuthority(zone_file))
    return retval

def error(msg):
    print >>sys.stderr, "%s: %s" % (PROGNAME, msg)

def get_serial(serial_file):
    serial = None

    try:
        f = open(serial_file, 'a+')
        f.seek(0, 0)
    except IOError:
        error("Cannot open '%s'" % serial_file, )
        return None

    try:
        serial_prefix = int(time.strftime('%Y%m%d', time.localtime(time.time()))) * 100
        try:
            serial = int(f.read())
            if serial - (serial % 100) != serial_prefix:
                serial = serial_prefix + 1
            else:
                serial += 1
        except ValueError:
            serial = serial_prefix + 1

        f.seek(0, 0)
        f.truncate()
        f.write(str(serial))
    except IOError:
        error("Cannot retrieve a serial number from '%s'" % serial_file)
    f.close()
    return serial

def parse_options(argv): 
    parser = optparse.OptionParser()
    parser.add_option('-d', dest='zone_repo_dir', help='directory under which zone files are stored', default=DEFAULTS['zone_repo_dir'])
    parser.add_option('-c', dest='config_file', help='configuration_file', default=DEFAULTS['config_file'])
    parser.add_option('-n', dest='serial_file', help='file storing the last serial number', default=DEFAULTS['serial_file'])
    parser.add_option('-f', dest='foreground', action='store_true', help='run the application foreground', default=DEFAULTS['foreground'])
    return parser.parse_args(argv)

def read_config(config_file):
    try:
        config = ini.INIConfig(open(config_file))
    except IOError:
        error("Cannot open '%s' (%s)" % (config_file, sys.exc_value))
        return None
    except Exception:
        error("Cannot parse '%s' (%s)" % (config_file, sys.exc_value))
        return None
    return config

def getdict(dict, key, default=None):
    try:
        retval = dict[key]
    except KeyError:
        retval = default
    return retval

def classify_addresses(args):
    v4addresses = []
    v6addresses = []

    for arg in args:
        if arg.startswith('[') and arg.endswith(']'):
            v6addresses.append(arg[1:-1])
        else:
            v4addresses.append(arg)

    return v4addresses, v6addresses

def csv(value):
    value = value.strip()
    if value == '':
        return []
    return re.split(r'\s*,\s*', value)

def main(argv):
    options, args = parse_options(argv[1:])

    config = read_config(options.config_file)
    if config is None:
        return 1

    serial_file = getdict(config['global'], 'serial_file', DEFAULTS['serial_file'])

    serial = get_serial(serial_file)
    if serial is None:
        return 1

    soa_defaults = {}
    for param in ['admin', 'refresh', 'retry', 'expire', 'minimum', 'ttl']:
        soa_defaults[param] = getdict(config['global'], param, DEFAULTS['soa'][param])
    nameservers_default = getdict(config['global'], 'nameservers', '')
    addresses_defaults = getdict(config['global'], 'addresses', '')

    db_config_defaults = {}
    for param in ['db.module', 'db.name', 'db.user', 'db.password']:
        db_config_defaults[param] = getdict(config['global'], param, '')

    resolvers = []

    resolvers += create_resolvers_from_zone_files(
        (os.path.join(path, filename) \
            for path, dirnames, filenames in os.walk(options.zone_repo_dir) \
                for filename in filenames \
                    if not filename.startswith('.')))

    for origin, section in config._sections.iteritems():
        soa = {}
        for param in ['admin', 'refresh', 'retry', 'expire', 'minimum', 'ttl']:
            soa[param] = getdict(section, param, soa_defaults[param])

        nameservers = csv(getdict(section, 'nameservers', nameservers_default))

        if len(nameservers) == 0:
            error("No nameservers provided for domain %s" % origin)
            return 1

        db_config = {}
        for param in ['db.module', 'db.name', 'db.user', 'db.password']:
            db_config[param] = getdict(section, param, db_config_defaults[param])
        if db_config['db.module'] == '':
            db_config = None

        v4addresses, v6addresses = classify_addresses(csv(getdict(section, 'addresses', nameservers_default)))

        if len(v4addresses) == 0 and len(v6addresses) == 0:
            error("No IP addresses are provided for domain %s" % origin)
            return 1

        for i in xrange(0, len(nameservers)):
            if not nameservers[i].endswith('.'):
                nameservers[i] += '.' + origin 

        if db_config is not None:
            pool = adbapi.ConnectionPool(
                db_config['db.module'],
                database=db_config['db.name'],
                user=db_config['db.user'],
                password=db_config['db.password'])
            backend = DBBackend(origin, pool)
        else:
            backend = None

        resolvers.append(AnyAuthority(
            origin, v4addresses, v6addresses, nameservers, serial,
            backend, **soa))

    factory = names.server.DNSServerFactory(resolvers, verbose=10)

    ports = [
        reactor.listenTCP(53, factory),
        reactor.listenUDP(53, names.dns.DNSDatagramProtocol(factory))]

    if options.foreground:
        reactor.run()
    else:
        uid, gid = resolve_uid(getdict(config['global'], 'uid', 0))
        gid = resolve_gid(getdict(config['global'], 'gid', gid))
        ctx = daemon.DaemonContext(files_preserve=[port.socket for port in ports],
                                   uid=uid, gid=gid)
        ctx.open()
        try:
            reactor.run()
        finally:
            ctx.close()

    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
